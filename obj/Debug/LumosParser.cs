//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Winship\Desktop\Senior Project\SENIOR PROJ\Lumos\Lumos\Lumos.g4 by ANTLR 4.6.6-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lumos {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class LumosParser : Parser {
	public const int
		T__0=1, SIN=2, COS=3, TAN=4, ASIN=5, ACOS=6, ATAN=7, LN=8, LOG=9, SQRT=10, 
		LPAREN=11, RPAREN=12, POW=13, PLUS=14, MIN=15, DIV=16, TIMES=17, MOD=18, 
		GE=19, GT=20, LE=21, LT=22, EQ=23, NE=24, ASSEQ=25, ASSDIVEQ=26, ASSMULTEQ=27, 
		ASSSUBEQ=28, ASSPLUSEQ=29, PLUSPLUS=30, MINUSMINUS=31, DISPLAY=32, NAME=33, 
		NUMBER=34, WS=35, NEWLINE=36, STRING=37, DIGIT=38, LETTER=39;
	public const int
		RULE_expr = 0, RULE_display = 1, RULE_methodCall = 2, RULE_methodName = 3, 
		RULE_methodCallArguments = 4, RULE_relop = 5, RULE_assop = 6, RULE_compileUnit = 7;
	public static readonly string[] ruleNames = {
		"expr", "display", "methodCall", "methodName", "methodCallArguments", 
		"relop", "assop", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, null, null, null, null, null, null, null, null, "'('", 
		"')'", "'^'", "'+'", "'-'", "'/'", "'â– '", "'%'", null, "'>'", null, "'<'", 
		null, null, "'='", null, null, null, null, null, null, "'Display'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SIN", "COS", "TAN", "ASIN", "ACOS", "ATAN", "LN", "LOG", 
		"SQRT", "LPAREN", "RPAREN", "POW", "PLUS", "MIN", "DIV", "TIMES", "MOD", 
		"GE", "GT", "LE", "LT", "EQ", "NE", "ASSEQ", "ASSDIVEQ", "ASSMULTEQ", 
		"ASSSUBEQ", "ASSPLUSEQ", "PLUSPLUS", "MINUSMINUS", "DISPLAY", "NAME", 
		"NUMBER", "WS", "NEWLINE", "STRING", "DIGIT", "LETTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lumos.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LumosParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : ExprContext {
		public DisplayContext display() {
			return GetRuleContext<DisplayContext>(0);
		}
		public ITerminalNode DIGIT() { return GetToken(LumosParser.DIGIT, 0); }
		public ITerminalNode[] LETTER() { return GetTokens(LumosParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(LumosParser.LETTER, i);
		}
		public PrintContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExprContext {
		public ITerminalNode NUMBER() { return GetToken(LumosParser.NUMBER, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentsContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode POW() { return GetToken(LumosParser.POW, 0); }
		public ExponentsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterExponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitExponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionOrSubtractionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MIN() { return GetToken(LumosParser.MIN, 0); }
		public ITerminalNode PLUS() { return GetToken(LumosParser.PLUS, 0); }
		public AdditionOrSubtractionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAdditionOrSubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAdditionOrSubtraction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOrSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrigFunctionContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(LumosParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LumosParser.RPAREN, 0); }
		public ITerminalNode SIN() { return GetToken(LumosParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(LumosParser.COS, 0); }
		public ITerminalNode TAN() { return GetToken(LumosParser.TAN, 0); }
		public ITerminalNode ASIN() { return GetToken(LumosParser.ASIN, 0); }
		public ITerminalNode ACOS() { return GetToken(LumosParser.ACOS, 0); }
		public ITerminalNode ATAN() { return GetToken(LumosParser.ATAN, 0); }
		public TrigFunctionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterTrigFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitTrigFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationOrDivisionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(LumosParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(LumosParser.DIV, 0); }
		public MultiplicationOrDivisionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterMultiplicationOrDivision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitMultiplicationOrDivision(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOrDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EOFContext : ExprContext {
		public ITerminalNode Eof() { return GetToken(LumosParser.Eof, 0); }
		public EOFContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterEOF(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitEOF(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEOF(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(LumosParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LumosParser.RPAREN, 0); }
		public ParenthesesContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				{
				_localctx = new NumberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 17; Match(NUMBER);
				}
				break;
			case DISPLAY:
				{
				_localctx = new PrintContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 18; display();
				State = 25;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case DIGIT:
					{
					State = 19; Match(DIGIT);
					}
					break;
				case LETTER:
					{
					State = 21;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 20; Match(LETTER);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 23;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SIN:
			case COS:
			case TAN:
			case ASIN:
			case ACOS:
			case ATAN:
				{
				_localctx = new TrigFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 27;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 28; Match(LPAREN);
				State = 29; expr(0);
				State = 30; Match(RPAREN);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenthesesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 32; Match(LPAREN);
				State = 33; expr(0);
				State = 34; Match(RPAREN);
				}
				break;
			case Eof:
				{
				_localctx = new EOFContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 36; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 48;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new ExponentsContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 39;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 40; Match(POW);
						State = 41; expr(4);
						}
						break;

					case 2:
						{
						_localctx = new MultiplicationOrDivisionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 42;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 43;
						_la = _input.La(1);
						if ( !(_la==DIV || _la==TIMES) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 44; expr(4);
						}
						break;

					case 3:
						{
						_localctx = new AdditionOrSubtractionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 45;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 46;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MIN) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 47; expr(3);
						}
						break;
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DisplayContext : ParserRuleContext {
		public ITerminalNode DISPLAY() { return GetToken(LumosParser.DISPLAY, 0); }
		public DisplayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterDisplay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitDisplay(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayContext display() {
		DisplayContext _localctx = new DisplayContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_display);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(DISPLAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(LumosParser.LPAREN, 0); }
		public MethodCallArgumentsContext methodCallArguments() {
			return GetRuleContext<MethodCallArgumentsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LumosParser.RPAREN, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; methodName();
			State = 56; Match(LPAREN);
			State = 57; methodCallArguments();
			State = 58; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LumosParser.NAME, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallArgumentsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MethodCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterMethodCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitMethodCallArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallArgumentsContext methodCallArguments() {
		MethodCallArgumentsContext _localctx = new MethodCallArgumentsContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_methodCallArguments);
		int _la;
		try {
			State = 71;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case RPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case Eof:
			case SIN:
			case COS:
			case TAN:
			case ASIN:
			case ACOS:
			case ATAN:
			case LPAREN:
			case DISPLAY:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; expr(0);
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__0) {
					{
					{
					State = 64; Match(T__0);
					State = 65; expr(0);
					}
					}
					State = 70;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	 
		public RelopContext() { }
		public virtual void CopyFrom(RelopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessThanOrEqualToContext : RelopContext {
		public ITerminalNode LE() { return GetToken(LumosParser.LE, 0); }
		public LessThanOrEqualToContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqualTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : RelopContext {
		public ITerminalNode LT() { return GetToken(LumosParser.LT, 0); }
		public LessThanContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : RelopContext {
		public ITerminalNode GT() { return GetToken(LumosParser.GT, 0); }
		public GreaterThanContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualToContext : RelopContext {
		public ITerminalNode NE() { return GetToken(LumosParser.NE, 0); }
		public NotEqualToContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterNotEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitNotEqualTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualToContext : RelopContext {
		public ITerminalNode EQ() { return GetToken(LumosParser.EQ, 0); }
		public EqualToContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitEqualTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualToContext : RelopContext {
		public ITerminalNode GE() { return GetToken(LumosParser.GE, 0); }
		public GreaterThanOrEqualToContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqualTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqualTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_relop);
		try {
			State = 79;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case EQ:
				_localctx = new EqualToContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(EQ);
				}
				break;
			case NE:
				_localctx = new NotEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(NE);
				}
				break;
			case GE:
				_localctx = new GreaterThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; Match(GE);
				}
				break;
			case GT:
				_localctx = new GreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; Match(GT);
				}
				break;
			case LE:
				_localctx = new LessThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 77; Match(LE);
				}
				break;
			case LT:
				_localctx = new LessThanContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 78; Match(LT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssopContext : ParserRuleContext {
		public AssopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assop; } }
	 
		public AssopContext() { }
		public virtual void CopyFrom(AssopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignMinusEqualsContext : AssopContext {
		public ITerminalNode ASSSUBEQ() { return GetToken(LumosParser.ASSSUBEQ, 0); }
		public AssignMinusEqualsContext(AssopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAssignMinusEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAssignMinusEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMinusEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignEqualsContext : AssopContext {
		public ITerminalNode ASSEQ() { return GetToken(LumosParser.ASSEQ, 0); }
		public AssignEqualsContext(AssopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAssignEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAssignEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignPlusEqualsContext : AssopContext {
		public ITerminalNode ASSPLUSEQ() { return GetToken(LumosParser.ASSPLUSEQ, 0); }
		public AssignPlusEqualsContext(AssopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAssignPlusEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAssignPlusEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignPlusEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignTimesEqualsContext : AssopContext {
		public ITerminalNode ASSMULTEQ() { return GetToken(LumosParser.ASSMULTEQ, 0); }
		public AssignTimesEqualsContext(AssopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAssignTimesEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAssignTimesEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignTimesEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignDivideEqualsContext : AssopContext {
		public ITerminalNode ASSDIVEQ() { return GetToken(LumosParser.ASSDIVEQ, 0); }
		public AssignDivideEqualsContext(AssopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterAssignDivideEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitAssignDivideEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignDivideEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssopContext assop() {
		AssopContext _localctx = new AssopContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assop);
		try {
			State = 86;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ASSEQ:
				_localctx = new AssignEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; Match(ASSEQ);
				}
				break;
			case ASSDIVEQ:
				_localctx = new AssignDivideEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(ASSDIVEQ);
				}
				break;
			case ASSMULTEQ:
				_localctx = new AssignTimesEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; Match(ASSMULTEQ);
				}
				break;
			case ASSSUBEQ:
				_localctx = new AssignMinusEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 84; Match(ASSSUBEQ);
				}
				break;
			case ASSPLUSEQ:
				_localctx = new AssignPlusEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 85; Match(ASSPLUSEQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LumosParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILumosListener typedListener = listener as ILumosListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILumosVisitor<TResult> typedVisitor = visitor as ILumosVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3)]\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\x18\n\x2\r\x2\xE\x2\x19\x5\x2\x1C\n"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2"+
		"(\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x33"+
		"\n\x2\f\x2\xE\x2\x36\v\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x45\n\x6\f\x6\xE\x6H\v\x6\x5\x6"+
		"J\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aR\n\a\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\bY\n\b\x3\t\x3\t\x3\t\x2\x2\x3\x2\n\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x2\x5\x3\x2\x4\t\x3\x2\x12\x13\x3\x2\x10\x11h\x2\'"+
		"\x3\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6\x39\x3\x2\x2\x2\b>\x3\x2\x2\x2\nI\x3"+
		"\x2\x2\x2\fQ\x3\x2\x2\x2\xEX\x3\x2\x2\x2\x10Z\x3\x2\x2\x2\x12\x13\b\x2"+
		"\x1\x2\x13(\a$\x2\x2\x14\x1B\x5\x4\x3\x2\x15\x1C\a(\x2\x2\x16\x18\a)\x2"+
		"\x2\x17\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A"+
		"\x3\x2\x2\x2\x1A\x1C\x3\x2\x2\x2\x1B\x15\x3\x2\x2\x2\x1B\x17\x3\x2\x2"+
		"\x2\x1C(\x3\x2\x2\x2\x1D\x1E\t\x2\x2\x2\x1E\x1F\a\r\x2\x2\x1F \x5\x2\x2"+
		"\x2 !\a\xE\x2\x2!(\x3\x2\x2\x2\"#\a\r\x2\x2#$\x5\x2\x2\x2$%\a\xE\x2\x2"+
		"%(\x3\x2\x2\x2&(\a\x2\x2\x3\'\x12\x3\x2\x2\x2\'\x14\x3\x2\x2\x2\'\x1D"+
		"\x3\x2\x2\x2\'\"\x3\x2\x2\x2\'&\x3\x2\x2\x2(\x34\x3\x2\x2\x2)*\f\x6\x2"+
		"\x2*+\a\xF\x2\x2+\x33\x5\x2\x2\x6,-\f\x5\x2\x2-.\t\x3\x2\x2.\x33\x5\x2"+
		"\x2\x6/\x30\f\x4\x2\x2\x30\x31\t\x4\x2\x2\x31\x33\x5\x2\x2\x5\x32)\x3"+
		"\x2\x2\x2\x32,\x3\x2\x2\x2\x32/\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32"+
		"\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x3\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2"+
		"\x37\x38\a\"\x2\x2\x38\x5\x3\x2\x2\x2\x39:\x5\b\x5\x2:;\a\r\x2\x2;<\x5"+
		"\n\x6\x2<=\a\xE\x2\x2=\a\x3\x2\x2\x2>?\a#\x2\x2?\t\x3\x2\x2\x2@J\x3\x2"+
		"\x2\x2\x41\x46\x5\x2\x2\x2\x42\x43\a\x3\x2\x2\x43\x45\x5\x2\x2\x2\x44"+
		"\x42\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2"+
		"GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2I@\x3\x2\x2\x2I\x41\x3\x2\x2\x2J\v\x3\x2"+
		"\x2\x2KR\a\x19\x2\x2LR\a\x1A\x2\x2MR\a\x15\x2\x2NR\a\x16\x2\x2OR\a\x17"+
		"\x2\x2PR\a\x18\x2\x2QK\x3\x2\x2\x2QL\x3\x2\x2\x2QM\x3\x2\x2\x2QN\x3\x2"+
		"\x2\x2QO\x3\x2\x2\x2QP\x3\x2\x2\x2R\r\x3\x2\x2\x2SY\a\x1B\x2\x2TY\a\x1C"+
		"\x2\x2UY\a\x1D\x2\x2VY\a\x1E\x2\x2WY\a\x1F\x2\x2XS\x3\x2\x2\x2XT\x3\x2"+
		"\x2\x2XU\x3\x2\x2\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2Y\xF\x3\x2\x2\x2Z[\a\x2"+
		"\x2\x3[\x11\x3\x2\x2\x2\v\x19\x1B\'\x32\x34\x46IQX";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Lumos
